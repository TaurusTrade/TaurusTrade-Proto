/**
 * 网关服务
 */
syntax = "proto3";

import "framework.proto";
import "market.proto";
import "trade.proto";


import "google/protobuf/empty.proto";
package taurustrade.framework;

//option csharp_namespace = "TaurusTrade.Requests";


/**
 *  和证券代码相关的请求 
 */
message SymbolRequest {	
	string symbol = 1;	/// 证券代码。 格式应该为 证券代码.交易所代码
}

/**
 * A SendOrderCommand tell a gateway to send a order, and gateway should return OrderResult imediately.
 */
// message SendOrderCommand {
// 	string symbol = 1;
//     select.message.Direction direction = 2;
//     select.message.Offset offset = 3;    
// 	select.message.PriceType type = 4;
// 	select.message.TradePurpose purpose = 5;
//     double price = 6;
//     double volume = 7; 
  
  
// 	string reference = 90;
// 	string gatewayID = 99;
// }


message CancelOrderCommand {
    string gatewayID = 99;
}

// 命令异步执行，但要同步给一个回执？？

/**
 * 下单或撤单动作的结果类型。 只用于 <href>OrderResult</href>.
 *
 * SUCCESSFUL: 下单或撤单指令正确，且符合风控要求，已经报往交易所。
 *
 * UNSUFFICIENT: 余额不足(持仓余额或资金不足)
 *
 * RISKFUL: 该委托存在风险，且达到了风控禁止的条件.
 *
 * OTHERS: 由于其他原因导致的下单或撤单失败。
 */
// enum OrderResultType {
// 	SUCCESSFUL = 0;
// 	UNSUFFICIENT = 1;
// 	RISKFUL = 2;
// 	OTHERS = 99;
// }



/**
 * 下单或撤单动作返回的结果.  
 * <dl>
 * <dt>resultType:</dt> 结果类型。 表示下单动作成功或失败。详见 OrderResultType。
 * <dt>orderID:</dt> 订单号。由交易所分配。 
 * 下单成功时，返回交易所分配的订单号
 * 下单失败时，不返回订单号
 * 撤单时，不管成功或失败均返回待撤的订单号
 * <dt>externalID:</dt> 第三方系统自定义号。比如柜台系统中的流水号。
 * </dl>
 */
message OrderResult {
	//OrderResultType resultType = 1;
	int32 code = 1;
	string orderID = 2;
	string externalID = 3;
	string message = 10;

/*
QuanTu

MBasketEntrustResult			
字段名称	字段说明	字段类型	备注
error_no	错误代码	int	
error_info	证券代码	string	
entrust_no	委托编号	int	
batch_no	操作批号	int	
investunit_id	投资单元ID	int	
instance_id	交易投资组合ID	int	
capitalunit_id	资金账户ID	int	
strategy_flag_id	策略标志ID	int	
strategy_req_id	策略请求ID	int	
success_flag	撤单成功标志	string	


O32

1: required OrderResultType resultType,
	2: optional string orderID,		# 
	3: optional string externalID
	
	risk_serial_no	N8	风控判断流水号		用于关联风控信息包中的风控信息条目	v	v	v
*/


}

/**
 * 网关服务
 */
service GatewayService {
	//订阅 Tick 数据
	rpc SubscribeTick (SymbolRequest) returns (stream taurustrade.message.Tick);
	rpc UnSubscribeTick(SymbolRequest) returns (taurustrade.message.GeneralRpcResponse);

	//rpc SendOrder(SendOrderCommand) returns (OrderResult);
	rpc CancelOrder(CancelOrderCommand) returns (OrderResult);
}

/*
service GatewayService {
	//GeneralRpcResponse
	//rpc SendOrder(SendOrderCommand) returns (OrderResult);
	//rpc CancelOrder(CancelOrderCommand) returns (OrderResult);

	//vnpy gateway
	rpc Connect(dict) returns (GeneralRpcResponse)
	rpc Close(google.protobuf.Empty) returns (GeneralRpcResponse)

	//rpc Subscribe(SubscribeRequest) returns (GeneralRpcResponse)
	rpc Subscribe(SubscribeRequest) returns (stream Tick)

	rpc SendOrder(OrderRequest) returns (OrderResult)	// str: orderID
	rpc SendOrders (stream OrderRequest) returns (stream OrderResult)	// List[str]: orderIDs
	
	rpc CancelOrder(CancelRequest) returns (OrderResult)	// str: orderID
	rpc CancelOrders (stream CancelRequest) returns (stream OrderResult)	// List[str]: orderIDs


	rpc XXX () returns (stream TickData)
	rpc XXX () returns (stream Trade)
	rpc XXX () returns (stream Order)


	//rpc QueryAccount(google.protobuf.Empty) returns (google.protobuf.Empty)	// original vnpy interface
	rpc QueryAccount (google.protobuf.Empty) returns (stream Account)

	//query_position
	rpc QueryPosition (google.protobuf.Empty) returns (stream Position)


	//query_history  Query bar history data.

	//get_default_setting
	rpc GetDefaultSetting(google.protobuf.Empty) returns (dict)

 	//self.server.register(self.main_engine.query_history)  -> dispatch to gateway

	//rpc XXX () returns (stream Contract)

	//rpc OnLog () returns (stream LogData)

   
   //vnpy OmsEngine( as a cache)
   rpc GetTick(string) returns (Tick)

   
		// dispatch to OmsEngine
        self.server.register(self.main_engine.get_tick)
        self.server.register(self.main_engine.get_order)
        self.server.register(self.main_engine.get_trade)
        self.server.register(self.main_engine.get_position)
        self.server.register(self.main_engine.get_account)
        self.server.register(self.main_engine.get_contract)
        self.server.register(self.main_engine.get_all_ticks)
        self.server.register(self.main_engine.get_all_orders)
        self.server.register(self.main_engine.get_all_trades)
        self.server.register(self.main_engine.get_all_positions)
        self.server.register(self.main_engine.get_all_accounts)
        self.server.register(self.main_engine.get_all_contracts)
        self.server.register(self.main_engine.get_all_active_orders)
   
}*/

